{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/components/KnowledgeGraph.js"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst KnowledgeGraph = ({ graphData }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const { nodes, links } = graphData;\n\n    const width = 800;\n    const height = 600;\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      svgGroup.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom).on(\"dblclick.zoom\", null); \n\n    const svgGroup = svg.append(\"g\");\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance((d) => {\n            const maxDistance = 1000; // maximum distance between nodes (lower weight)\n            const minDistance = 20;  // minimum distance between nodes (higher weight)\n            const weight = d.weight; \n\n            //exponential decay for distance\n            return minDistance + (maxDistance - minDistance) * Math.exp(-3 * weight);\n          })\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-400))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    const link = svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .style(\"stroke\", (d) => {\n        const weight = d.weight;\n        return d3.interpolateBlues(Math.pow(weight, 3)); // blue link color scales exponentially\n      })\n      .style(\"stroke-width\", 2);\n\n    const node = svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .style(\"fill\", \"skyblue\")\n      .call(\n        d3\n          .drag()\n          .on(\"start\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            d.fx = d.x;\n            d.fy = d.y;\n          })\n          .on(\"drag\", (event, d) => {\n            d.fx = event.x;\n            d.fy = event.y;\n          })\n          .on(\"end\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0);\n            d.fx = null;\n            d.fy = null;\n          })\n      );\n\n    const label = svgGroup\n      .append(\"g\")\n      .attr(\"class\", \"labels\")\n      .selectAll(\"text\")\n      .data(nodes)\n      .enter()\n      .append(\"text\")\n      .attr(\"dx\", 12)\n      .attr(\"dy\", 4)\n      .text((d) => d.id);\n\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n    });\n  }, [graphData]);\n\n  return <svg ref={svgRef} width={800} height={600} style={{ border: \"1px solid #ddd\" }}></svg>;\n};\n\nexport default KnowledgeGraph;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/page.js"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Box, Typography, Slider } from \"@mui/material\";\nimport KnowledgeGraph from \"./components/KnowledgeGraph\";\n\nconst Home = ({ graphData }) => {\n  const [threshold, setThreshold] = useState(0.2); // Default threshold\n\n  // Handle threshold change\n  const handleThresholdChange = (event, newValue) => {\n    setThreshold(newValue);\n  };\n\n  // Filter links based on the threshold\n  const filteredGraphData = {\n    nodes: graphData.nodes,\n    links: graphData.links.filter((link) => link.weight >= threshold),\n  };\n\n  return (\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Knowledge Network Generator\n      </Typography>\n\n      {/* Threshold Slider */}\n      <Box sx={{ width: \"80%\", marginBottom: \"20px\" }}>\n        <Typography variant=\"body1\" gutterBottom>\n          Set Threshold for Linking Nodes: {threshold.toFixed(2)}\n        </Typography>\n        <Slider\n          value={threshold}\n          min={0}\n          max={1}\n          step={0.01}\n          onChange={handleThresholdChange}\n          valueLabelDisplay=\"auto\"\n        />\n      </Box>\n\n      {/* Knowledge Graph */}\n      <KnowledgeGraph graphData={filteredGraphData} />\n    </Box>\n  );\n};\n\nexport default Home;"],"names":[],"mappings":";;;;AAEA;AAEA;AADA;AAAA;AAAA;AAHA;;;;;AAMA,MAAM,OAAO,CAAC,EAAE,SAAS,EAAE;IACzB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,oBAAoB;IAErE,0BAA0B;IAC1B,MAAM,wBAAwB,CAAC,OAAO;QACpC,aAAa;IACf;IAEA,sCAAsC;IACtC,MAAM,oBAAoB;QACxB,OAAO,UAAU,KAAK;QACtB,OAAO,UAAU,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,MAAM,IAAI;IACzD;IAEA,qBACE,8OAAC,iLAAA,CAAA,MAAG;QAAC,IAAI;YAAE,SAAS;YAAQ,eAAe;YAAU,YAAY;QAAS;;0BACxE,8OAAC,sMAAA,CAAA,aAAU;gBAAC,SAAQ;gBAAK,YAAY;0BAAC;;;;;;0BAKtC,8OAAC,iLAAA,CAAA,MAAG;gBAAC,IAAI;oBAAE,OAAO;oBAAO,cAAc;gBAAO;;kCAC5C,8OAAC,sMAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAQ,YAAY;;4BAAC;4BACL,UAAU,OAAO,CAAC;;;;;;;kCAEtD,8OAAC,0LAAA,CAAA,SAAM;wBACL,OAAO;wBACP,KAAK;wBACL,KAAK;wBACL,MAAM;wBACN,UAAU;wBACV,mBAAkB;;;;;;;;;;;;0BAKtB,8OAAC,0IAAA,CAAA,UAAc;gBAAC,WAAW;;;;;;;;;;;;AAGjC;uCAEe"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}