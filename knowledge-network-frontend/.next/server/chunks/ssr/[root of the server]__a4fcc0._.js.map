{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/components/KnowledgeGraph.js"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst KnowledgeGraph = ({ graphData }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous graph\n\n    const { nodes, links } = graphData;\n\n    const width = 800;\n    const height = 600;\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id((d) => d.id).distance(100))\n      .force(\"charge\", d3.forceManyBody().strength(-400))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    const link = svg\n      .append(\"g\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 2);\n\n    const node = svg\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .style(\"fill\", \"skyblue\")\n      .call(\n        d3\n          .drag()\n          .on(\"start\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            d.fx = d.x;\n            d.fy = d.y;\n          })\n          .on(\"drag\", (event, d) => {\n            d.fx = event.x;\n            d.fy = event.y;\n          })\n          .on(\"end\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0);\n            d.fx = null;\n            d.fy = null;\n          })\n      );\n\n    const label = svg\n      .append(\"g\")\n      .selectAll(\"text\")\n      .data(nodes)\n      .enter()\n      .append(\"text\")\n      .attr(\"dx\", 12)\n      .attr(\"dy\", 4)\n      .text((d) => d.id);\n\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n    });\n  }, [graphData]);\n\n  return <svg ref={svgRef} width={800} height={600}></svg>;\n};\n\nexport default KnowledgeGraph;"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAHA;;;;AAKA,MAAM,iBAAiB,CAAC,EAAE,SAAS,EAAE;IACnC,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD;IAEpB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;QAEhB,MAAM,MAAM,mIAAG,MAAM,CAAC,OAAO,OAAO;QACpC,IAAI,SAAS,CAAC,KAAK,MAAM,IAAI,uBAAuB;QAEpD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;QAEzB,MAAM,QAAQ;QACd,MAAM,SAAS;QAEf,MAAM,aAAa,mIAChB,eAAe,CAAC,OAChB,KAAK,CAAC,QAAQ,mIAAG,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,IAAM,EAAE,EAAE,EAAE,QAAQ,CAAC,MAC3D,KAAK,CAAC,UAAU,mIAAG,aAAa,GAAG,QAAQ,CAAC,CAAC,MAC7C,KAAK,CAAC,UAAU,mIAAG,WAAW,CAAC,QAAQ,GAAG,SAAS;QAEtD,MAAM,OAAO,IACV,MAAM,CAAC,KACP,SAAS,CAAC,QACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,QACP,KAAK,CAAC,UAAU,QAChB,KAAK,CAAC,gBAAgB;QAEzB,MAAM,OAAO,IACV,MAAM,CAAC,KACP,SAAS,CAAC,UACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,UACP,IAAI,CAAC,KAAK,IACV,KAAK,CAAC,QAAQ,WACd,IAAI,CACH,mIACG,IAAI,GACJ,EAAE,CAAC,SAAS,CAAC,OAAO;YACnB,IAAI,CAAC,MAAM,MAAM,EAAE,WAAW,WAAW,CAAC,KAAK,OAAO;YACtD,EAAE,EAAE,GAAG,EAAE,CAAC;YACV,EAAE,EAAE,GAAG,EAAE,CAAC;QACZ,GACC,EAAE,CAAC,QAAQ,CAAC,OAAO;YAClB,EAAE,EAAE,GAAG,MAAM,CAAC;YACd,EAAE,EAAE,GAAG,MAAM,CAAC;QAChB,GACC,EAAE,CAAC,OAAO,CAAC,OAAO;YACjB,IAAI,CAAC,MAAM,MAAM,EAAE,WAAW,WAAW,CAAC;YAC1C,EAAE,EAAE,GAAG;YACP,EAAE,EAAE,GAAG;QACT;QAGN,MAAM,QAAQ,IACX,MAAM,CAAC,KACP,SAAS,CAAC,QACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,QACP,IAAI,CAAC,MAAM,IACX,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE;QAEnB,WAAW,EAAE,CAAC,QAAQ;YACpB,KACG,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC;YAE/B,KAAK,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,CAAC;YAEjD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAM,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAM,EAAE,CAAC;QAClD;IACF,GAAG;QAAC;KAAU;IAEd,qBAAO,8OAAC;QAAI,KAAK;QAAQ,OAAO;QAAK,QAAQ;;;;;;AAC/C;uCAEe"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/graph/page.js"],"sourcesContent":["\"use client\";\n\nimport { useSearchParams } from \"next/navigation\";\nimport KnowledgeGraph from \"../components/KnowledgeGraph\";\n\nconst GraphPage = () => {\n  const searchParams = useSearchParams();\n  const data = searchParams.get(\"data\") ? JSON.parse(decodeURIComponent(searchParams.get(\"data\"))) : null;\n\n  return (\n    <div>\n      <h1>Generated Knowledge Network</h1>\n      {data ? (\n        <KnowledgeGraph graphData={data} />\n      ) : (\n        <p>No graph data available. Please try again.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphPage;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKA,MAAM,YAAY;IAChB,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,OAAO,aAAa,GAAG,CAAC,UAAU,KAAK,KAAK,CAAC,mBAAmB,aAAa,GAAG,CAAC,YAAY;IAEnG,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;YACH,qBACC,8OAAC,0IAAA,CAAA,UAAc;gBAAC,WAAW;;;;;qCAE3B,8OAAC;0BAAE;;;;;;;;;;;;AAIX;uCAEe"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}