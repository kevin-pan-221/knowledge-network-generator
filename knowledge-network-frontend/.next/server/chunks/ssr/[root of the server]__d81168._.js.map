{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/components/KnowledgeGraph.js"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst KnowledgeGraph = ({ graphData }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous graph\n\n    const { nodes, links } = graphData;\n\n    const width = 800;\n    const height = 600;\n\n    // Initialize the force simulation\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance((d) => {\n            // Calculate distance using an exponential function of weight\n            const baseDistance = 500; // Base distance for low-weight connections\n            const scaleFactor = 20; // Scale to adjust the exponential impact\n            return baseDistance * Math.exp(-d.weight * scaleFactor);\n          })\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-400))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    // Create link elements\n    const link = svg\n      .append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 2);\n\n    // Create node elements\n    const node = svg\n      .append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 10)\n      .style(\"fill\", \"skyblue\")\n      .call(\n        d3\n          .drag()\n          .on(\"start\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            d.fx = d.x;\n            d.fy = d.y;\n          })\n          .on(\"drag\", (event, d) => {\n            d.fx = event.x;\n            d.fy = event.y;\n          })\n          .on(\"end\", (event, d) => {\n            if (!event.active) simulation.alphaTarget(0);\n            d.fx = null;\n            d.fy = null;\n          })\n      );\n\n    // Create labels\n    const label = svg\n      .append(\"g\")\n      .attr(\"class\", \"labels\")\n      .selectAll(\"text\")\n      .data(nodes)\n      .enter()\n      .append(\"text\")\n      .attr(\"dx\", 12)\n      .attr(\"dy\", 4)\n      .text((d) => d.id);\n\n    // Update positions on simulation tick\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n    });\n  }, [graphData]);\n\n  return <svg ref={svgRef} width={800} height={600}></svg>;\n};\n\nexport default KnowledgeGraph;"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAHA;;;;AAKA,MAAM,iBAAiB,CAAC,EAAE,SAAS,EAAE;IACnC,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD;IAEpB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;QAEhB,MAAM,MAAM,mIAAG,MAAM,CAAC,OAAO,OAAO;QACpC,IAAI,SAAS,CAAC,KAAK,MAAM,IAAI,uBAAuB;QAEpD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;QAEzB,MAAM,QAAQ;QACd,MAAM,SAAS;QAEf,kCAAkC;QAClC,MAAM,aAAa,mIAChB,eAAe,CAAC,OAChB,KAAK,CACJ,QACA,mIACG,SAAS,CAAC,OACV,EAAE,CAAC,CAAC,IAAM,EAAE,EAAE,EACd,QAAQ,CAAC,CAAC;YACT,6DAA6D;YAC7D,MAAM,eAAe,KAAK,2CAA2C;YACrE,MAAM,cAAc,IAAI,yCAAyC;YACjE,OAAO,eAAe,KAAK,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG;QAC7C,IAEH,KAAK,CAAC,UAAU,mIAAG,aAAa,GAAG,QAAQ,CAAC,CAAC,MAC7C,KAAK,CAAC,UAAU,mIAAG,WAAW,CAAC,QAAQ,GAAG,SAAS;QAEtD,uBAAuB;QACvB,MAAM,OAAO,IACV,MAAM,CAAC,KACP,IAAI,CAAC,SAAS,SACd,SAAS,CAAC,QACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,QACP,KAAK,CAAC,UAAU,QAChB,KAAK,CAAC,gBAAgB;QAEzB,uBAAuB;QACvB,MAAM,OAAO,IACV,MAAM,CAAC,KACP,IAAI,CAAC,SAAS,SACd,SAAS,CAAC,UACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,UACP,IAAI,CAAC,KAAK,IACV,KAAK,CAAC,QAAQ,WACd,IAAI,CACH,mIACG,IAAI,GACJ,EAAE,CAAC,SAAS,CAAC,OAAO;YACnB,IAAI,CAAC,MAAM,MAAM,EAAE,WAAW,WAAW,CAAC,KAAK,OAAO;YACtD,EAAE,EAAE,GAAG,EAAE,CAAC;YACV,EAAE,EAAE,GAAG,EAAE,CAAC;QACZ,GACC,EAAE,CAAC,QAAQ,CAAC,OAAO;YAClB,EAAE,EAAE,GAAG,MAAM,CAAC;YACd,EAAE,EAAE,GAAG,MAAM,CAAC;QAChB,GACC,EAAE,CAAC,OAAO,CAAC,OAAO;YACjB,IAAI,CAAC,MAAM,MAAM,EAAE,WAAW,WAAW,CAAC;YAC1C,EAAE,EAAE,GAAG;YACP,EAAE,EAAE,GAAG;QACT;QAGN,gBAAgB;QAChB,MAAM,QAAQ,IACX,MAAM,CAAC,KACP,IAAI,CAAC,SAAS,UACd,SAAS,CAAC,QACV,IAAI,CAAC,OACL,KAAK,GACL,MAAM,CAAC,QACP,IAAI,CAAC,MAAM,IACX,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE;QAEnB,sCAAsC;QACtC,WAAW,EAAE,CAAC,QAAQ;YACpB,KACG,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC,EAC5B,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,CAAC;YAE/B,KAAK,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAM,EAAE,CAAC;YAEjD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAM,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAM,EAAE,CAAC;QAClD;IACF,GAAG;QAAC;KAAU;IAEd,qBAAO,8OAAC;QAAI,KAAK;QAAQ,OAAO;QAAK,QAAQ;;;;;;AAC/C;uCAEe"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///Users/kevinpan/projects/knowledge_graph/knowledge-network-frontend/src/app/page.js"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport KnowledgeGraph from \"./components/KnowledgeGraph\";\nimport { Box, TextField, Button, Typography, List, ListItem, ListItemText } from \"@mui/material\";\n\nconst Home = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [graphData, setGraphData] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/generate_graph\", {\n        user_input: userInput,\n      });\n      setGraphData(response.data);\n      setSelectedNode(null); // Reset selection when a new graph is generated\n    } catch (error) {\n      console.error(\"Error generating graph:\", error);\n      alert(\"Failed to generate the graph. Please try again.\");\n    }\n  };\n\n  // Function to get the top 10 closest nodes\n  const getTopClosestNodes = () => {\n    if (!graphData || !graphData.links) return [];\n    return graphData.links\n      .filter((link) => selectedNode === null || link.source === selectedNode || link.target === selectedNode)\n      .sort((a, b) => b.weight - a.weight)\n      .slice(0, 10);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\", height: \"100vh\" }}>\n      {/* Sidebar */}\n      <Box\n        sx={{\n          width: \"25%\",\n          padding: \"20px\",\n          borderRight: \"1px solid #ddd\",\n          overflowY: \"auto\",\n          backgroundColor: \"#f9f9f9\",\n        }}\n      >\n        <Typography variant=\"h6\" gutterBottom>\n          Node Explorer\n        </Typography>\n        <TextField\n          label=\"Search Nodes\"\n          variant=\"outlined\"\n          fullWidth\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          sx={{ marginBottom: \"20px\" }}\n        />\n        <Typography variant=\"body1\" gutterBottom>\n          {selectedNode ? `Selected Node: ${selectedNode}` : \"Top 10 Closest Nodes\"}\n        </Typography>\n        <List>\n          {getTopClosestNodes().map((link, index) => (\n            <ListItem\n              key={index}\n              button\n              onClick={() =>\n                setSelectedNode(link.source.id === selectedNode ? link.target.id : link.source.id)\n              }\n            >\n              <ListItemText\n                primary={`${\n                  link.source.id === selectedNode ? link.target.id : link.source.id\n                } (${link.weight.toFixed(2)})`}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </Box>\n\n      {/* Main Content */}\n      <Box sx={{ flex: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", padding: \"20px\" }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Knowledge Network Generator\n        </Typography>\n\n        <Box\n          sx={{\n            marginBottom: \"20px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            border: \"2px solid #3f51b5\",\n            width: \"800px\",\n            height: \"600px\",\n          }}\n        >\n          {graphData ? (\n            <KnowledgeGraph graphData={graphData} />\n          ) : (\n            <Typography variant=\"body1\">Enter data below to generate a graph</Typography>\n          )}\n        </Box>\n\n        {/* Input Form */}\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          sx={{\n            width: \"80%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\",\n          }}\n        >\n          <TextField\n            id=\"userInput\"\n            label=\"Enter text (comma-separated)\"\n            variant=\"outlined\"\n            multiline\n            rows={4}\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            fullWidth\n          />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n            Generate Knowledge Network\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Home;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}